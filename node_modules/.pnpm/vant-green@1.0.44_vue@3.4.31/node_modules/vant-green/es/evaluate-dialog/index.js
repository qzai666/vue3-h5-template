import { createNamespace } from '../utils';
import Overlay from '../overlay';
import Icon from '../icon';
import Button from '../button';
import Avatar from '../avatar';
import Divider from '../divider';
import Rate from '../rate';
import Field from '../field';

var _createNamespace = createNamespace('evaluate-dialog'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  props: {
    show: Boolean,
    avatarFigure: {
      type: [Number, String],
      default: 7
    },
    avatarSize: {
      type: [Number, String],
      default: 40
    },
    avatarRadius: {
      type: [Number, String],
      default: 2
    },
    doctorName: String,
    doctorTitle: String,
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    allowHalf: Boolean,
    rateText: Array,
    placeholder: {
      type: String,
      default: '请输入您对医生的评价…'
    },
    maxCount: {
      type: Number,
      default: 200
    },
    buttonText: {
      type: String,
      default: '提交评价'
    }
  },
  data: function data() {
    return {
      value: 5,
      comment: ''
    };
  },
  methods: {
    close: function close() {
      if (!this.show) {
        return;
      }

      this.$emit('close');
    },
    confirm: function confirm() {
      this.$emit('confirm', {
        rate: this.value,
        rateText: this.allowHalf ? this.rateText[this.value * 2 - 1] : this.rateText[this.value - 1],
        options: this.options.filter(function (obj) {
          return obj.checked;
        }).map(function (item) {
          return item.text;
        }),
        comment: this.comment
      });
      this.clear();
    },
    clear: function clear() {
      this.options.forEach(function (element) {
        element.checked = false;
      });
      this.value = 5;
      this.comment = '';
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];
    var closeIcon = h(Icon, {
      "attrs": {
        "role": "button",
        "tabindex": "0",
        "name": "cross"
      },
      "class": bem('close-icon'),
      "on": {
        "click": this.close
      }
    });
    var genDoctor = this.slots('doctor') || h("div", {
      "class": bem('doctor')
    }, [h(Avatar, {
      "attrs": {
        "figure": this.avatarFigure,
        "size": this.avatarSize,
        "radius": this.avatarRadius
      },
      "class": bem('avatar')
    }), h("div", {
      "class": bem('doctor-name-wrapper')
    }, [h("span", {
      "class": bem('doctor-name')
    }, [this.doctorName]), h("span", {
      "class": bem('doctor-title')
    }, [this.doctorTitle])])]);
    var genRate = h("div", {
      "class": bem('rate-wrapper')
    }, [h(Rate, {
      "attrs": {
        "void-color": "#e2e2e2",
        "void-icon": "star",
        "allow-half": this.allowHalf,
        "size": 26,
        "gutter": 13
      },
      "model": {
        value: _this.value,
        callback: function callback($$v) {
          _this.value = $$v;
        }
      }
    }), this.rateText && h(Divider, {
      "style": {
        padding: '12px 85px 0',
        borderColor: '#FF7B35',
        color: '#FF7B35'
      }
    }, [this.allowHalf ? this.rateText[this.value * 2 - 1] : this.rateText[this.value - 1]])]);

    function genChecked() {
      return h("div", [h("span", {
        "class": bem('icon-wrap')
      }, [" "]), h(Icon, {
        "class": bem('icon'),
        "attrs": {
          "name": "success"
        }
      })]);
    }

    var genOptions = h("div", {
      "class": bem('options')
    }, [this.options.map(function (item, index) {
      if (!item.hasOwnProperty('checked')) {
        _this.$set(item, 'checked', false);
      }

      return h("span", {
        "key": index,
        "class": bem('option-inline', {
          checked: item.checked
        }),
        "on": {
          "click": function click() {
            item.checked = !item.checked;
          }
        }
      }, [item.checked && genChecked(), " ", item.text]);
    })]);
    var genField = h(Field, {
      "attrs": {
        "type": "textarea",
        "rows": "2",
        "maxlength": this.maxCount,
        "placeholder": this.placeholder,
        "show-word-limit": true
      },
      "class": bem('field'),
      "model": {
        value: _this.comment,
        callback: function callback($$v) {
          _this.comment = $$v;
        }
      }
    });
    var genButton = h(Button, {
      "attrs": {
        "type": "primary",
        "block": true
      },
      "class": bem('button'),
      "on": {
        "click": this.confirm
      }
    }, [this.buttonText]);
    return h(Overlay, {
      "attrs": {
        "show": this.show
      },
      "class": bem()
    }, [h("div", {
      "class": bem('wrapper')
    }, [closeIcon, genDoctor, h(Divider, {
      "attrs": {
        "dashed": true
      }
    }), genRate, genOptions, genField, genButton, this.slots()])]);
  }
});