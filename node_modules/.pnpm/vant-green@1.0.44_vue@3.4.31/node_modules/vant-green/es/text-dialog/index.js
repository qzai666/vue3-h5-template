import { createNamespace } from '../utils';
import { BORDER_BOTTOM } from '../utils/constant';
import Popup from '../popup';
import Icon from '../icon';
import Button from '../button';
import Checkbox from '../checkbox';

var _createNamespace = createNamespace('text-dialog'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  props: {
    show: Boolean,
    title: String,
    body: [Array, String],
    mask: Boolean,
    check: {
      type: Boolean,
      default: true
    },
    checkboxLabel: String,
    buttonText: String,
    ableClose: {
      type: Boolean,
      default: true
    },
    ableCheck: {
      type: Boolean,
      default: true
    },
    ableConfirm: {
      type: Boolean,
      default: true
    }
  },
  computed: {
    proxyCheck: {
      get: function get() {
        return this.check;
      },
      set: function set(val) {
        this.$emit('toggle', val);
      }
    }
  },
  methods: {
    close: function close() {
      this.show && this.$emit('close');
    },
    confirm: function confirm() {
      this.$emit('confirm');
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];
    var closeIcon = this.ableClose && h(Icon, {
      "attrs": {
        "role": "button",
        "tabindex": "0",
        "name": "cross"
      },
      "class": bem('close-icon'),
      "on": {
        "click": this.close
      }
    });
    var genTitle = this.slots('title') || h("div", {
      "class": bem('title')
    }, [this.title]);
    var genBody = h("div", {
      "class": bem('body')
    }, [this.slots('body') || typeof this.body === 'string' ? h("div", {
      "class": bem('content')
    }, [this.slots('body') || this.body]) : this.body instanceof Array && this.body.map(function (item) {
      return h("div", {
        "class": bem('part')
      }, [!!item.title && h("div", {
        "class": bem('subtitle')
      }, [item.title]), h("div", {
        "class": bem('content')
      }, [item.content])]);
    })]);
    var genMask = this.mask && h("div", {
      "class": [bem('line'), BORDER_BOTTOM]
    }, [this.mask && h("div", {
      "class": bem('mask')
    })]);
    var genCheckbox = (this.slots('checkbox-label') || this.checkboxLabel) && h("div", {
      "class": bem('checkbox')
    }, [h(Checkbox, {
      "attrs": {
        "plain": true,
        "icon-size": 16,
        "disabled": !this.ableCheck
      },
      "model": {
        value: _this.proxyCheck,
        callback: function callback($$v) {
          _this.proxyCheck = $$v;
        }
      }
    }, [this.slots('checkbox-label') || h("span", [this.checkboxLabel])])]);
    var genButton = this.buttonText && h(Button, {
      "attrs": {
        "type": "primary",
        "disabled": !this.ableConfirm,
        "block": true
      },
      "class": bem('button'),
      "on": {
        "click": this.confirm
      }
    }, [this.buttonText]);
    return h(Popup, {
      "attrs": {
        "round": true,
        "safeAreaInsetBottom": false,
        "closeOnClickOverlay": this.ableClose
      },
      "model": {
        value: _this.show,
        callback: function callback($$v) {
          _this.show = $$v;
        }
      }
    }, [h("div", {
      "class": bem('wrapper')
    }, [closeIcon, genTitle, genBody, genMask, genCheckbox, genButton, this.slots()])]);
  }
});