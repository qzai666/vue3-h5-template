import { createNamespace } from '../utils';
import Cell from '../cell';
import Icon from '../icon';
import Popup from '../popup';
import { PortalMixin } from '../mixins/portal';
import { ChildrenMixin } from '../mixins/relation';

var _createNamespace = createNamespace('dropdown-item'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  mixins: [PortalMixin({
    ref: 'wrapper'
  }), ChildrenMixin('vanDropdownMenu')],
  props: {
    value: null,
    title: String,
    disabled: Boolean,
    titleClass: String,
    options: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    multiple: Boolean
  },
  data: function data() {
    return {
      transition: true,
      showPopup: false,
      showWrapper: false,
      optionsCopy: []
    };
  },
  computed: {
    displayTitle: function displayTitle() {
      var _this = this;

      if (this.title) {
        return this.title;
      }

      var match = this.options.filter(function (option) {
        return option.value === _this.value;
      });
      return match.length ? match[0].text : '';
    }
  },
  watch: {
    showPopup: function showPopup(val) {
      if (val) {
        this.optionsCopy = JSON.parse(JSON.stringify(this.options));
      } else {
        this.$emit('change', this.optionsCopy);
      }
    }
  },
  methods: {
    toggle: function toggle(show, options) {
      if (show === void 0) {
        show = !this.showPopup;
      }

      if (options === void 0) {
        options = {};
      }

      if (show === this.showPopup) {
        return;
      }

      this.transition = !options.immediate;
      this.showPopup = show;

      if (show) {
        this.parent.updateOffset();
        this.showWrapper = true;
      }
    },
    reset: function reset() {
      this.optionsCopy.forEach(function (element) {
        if (element.options) {
          element.options.forEach(function (e) {
            if (e.hasOwnProperty('checked')) {
              delete e.checked;
            }
          });
        } else if (element.hasOwnProperty('checked')) {
          delete element.checked;
        }
      });
    }
  },
  beforeCreate: function beforeCreate() {
    var _this2 = this;

    var createEmitter = function createEmitter(eventName) {
      return function () {
        return _this2.$emit(eventName);
      };
    };

    this.onOpen = createEmitter('open');
    this.onClose = createEmitter('close');
    this.onOpened = createEmitter('opened');
  },
  render: function render() {
    var _this3 = this;

    var h = arguments[0];
    var _this$parent = this.parent,
        zIndex = _this$parent.zIndex,
        offset = _this$parent.offset,
        overlay = _this$parent.overlay,
        duration = _this$parent.duration,
        direction = _this$parent.direction,
        activeColor = _this$parent.activeColor,
        closeOnClickOverlay = _this$parent.closeOnClickOverlay;

    function genChecked() {
      return h("div", [h("span", {
        "class": bem('icon-wrap')
      }, [" "]), h(Icon, {
        "class": bem('icon'),
        "attrs": {
          "name": "success"
        }
      })]);
    }

    var inlineOption = function inlineOption(item, index) {
      if (!item.hasOwnProperty('checked')) {
        _this3.$set(item, 'checked', false);
      }

      return h("span", {
        "key": index,
        "class": bem('option-inline', {
          checked: item.checked
        }),
        "on": {
          "click": function click() {
            item.checked = !item.checked;
          }
        }
      }, [item.checked && genChecked(), " ", item.text]);
    };

    var Options;

    if (this.multiple) {
      Options = this.optionsCopy.map(function (item, index) {
        if (item.options) {
          return h("li", [h("p", {
            "class": bem('option-title')
          }, [item.title]), item.options.map(function (jitem, jindex) {
            return inlineOption(jitem, jindex);
          })]);
        }

        return inlineOption(item, index);
      });
    } else {
      Options = this.optionsCopy.map(function (item) {
        var active = item.value === _this3.value;
        return h(Cell, {
          "attrs": {
            "clickable": true,
            "icon": item.icon,
            "title": item.text
          },
          "key": item.value,
          "class": bem('option', {
            active: active
          }),
          "style": {
            color: active ? activeColor : ''
          },
          "on": {
            "click": function click() {
              _this3.showPopup = false;

              if (item.value !== _this3.value) {
                _this3.$emit('input', item.value);

                _this3.$emit('change', item.value);
              }
            }
          }
        }, [active && h(Icon, {
          "class": bem('icon'),
          "attrs": {
            "color": activeColor,
            "name": "success"
          }
        })]);
      });
    }

    var style = {
      zIndex: zIndex
    };

    if (direction === 'down') {
      style.top = offset + "px";
    } else {
      style.bottom = offset + "px";
    }

    return h("div", [h("div", {
      "directives": [{
        name: "show",
        value: this.showWrapper
      }],
      "ref": "wrapper",
      "style": style,
      "class": bem([direction])
    }, [h(Popup, {
      "attrs": {
        "overlay": overlay,
        "position": direction === 'down' ? 'top' : 'bottom',
        "duration": this.transition ? duration : 0,
        "closeOnClickOverlay": closeOnClickOverlay,
        "overlayStyle": {
          position: 'absolute'
        }
      },
      "class": bem('content'),
      "on": {
        "open": this.onOpen,
        "close": this.onClose,
        "opened": this.onOpened,
        "closed": function closed() {
          _this3.showWrapper = false;

          _this3.$emit('closed');
        }
      },
      "model": {
        value: _this3.showPopup,
        callback: function callback($$v) {
          _this3.showPopup = $$v;
        }
      }
    }, [Options, h("div", {
      "class": bem('slot')
    }, [this.slots('default')])])])]);
  }
});