"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _utils2 = _interopRequireDefault(require("./utils"));

var _createNamespace = (0, _utils.createNamespace)('schedule'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: {
    title: String,
    data: {
      type: Array,
      default: []
    },
    dataKey: {
      type: String,
      default: 'content'
    },
    calendar: Array,
    label: Array,
    start: String,
    days: {
      type: Number,
      default: 7
    },
    prefix: {
      type: String,
      default: '星期'
    },
    exclude: Array,
    showWeek: {
      type: Boolean,
      default: true
    },
    dateFormat: {
      type: String,
      default: 'mm-dd'
    },
    lighter: [String, Array],
    opacity: [String, Array]
  },
  data: function data() {
    return {
      header: []
    };
  },
  created: function created() {
    this.header = this.calendar || this.getCalendar();
  },
  methods: {
    getCalendar: function getCalendar() {
      var arr = _utils2.default.getDates(this.start, this.days);

      var arr1 = [];

      for (var i = 0; i < arr.length; i++) {
        var day = _utils2.default.getWeekday(arr[i], this.prefix, this.exclude);

        arr[i] = _utils2.default.formatWithPatternDate(this.dateFormat, arr[i]);

        if (day) {
          this.showWeek ? arr1.push(day + " " + arr[i]) : arr1.push(arr[i]);
        }
      }

      return arr1;
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];

    var hasText = function hasText(text, v) {
      if (_this[v] && _this[v].length > 0) {
        var arr = typeof _this[v] === 'string' ? [_this[v]] : _this[v];
        return ~arr.indexOf(text);
      }
    };

    var title = this.slots('title') || this.title && h("div", {
      "class": bem('title')
    }, [this.title]);
    var header = this.header.map(function (item) {
      return h("td", {
        "class": bem('header')
      }, [_this.slots('header') || item.split(' ') && h("div", [h("p", {
        "class": bem('week')
      }, [item.split(' ')[0]]), h("p", {
        "class": bem('date')
      }, [item.split(' ')[1]])]) || {
        item: item
      }]);
    });
    var content = this.data.map(function (item) {
      return item && item.length > 0 && item.map(function (jitem, jindex) {
        return jindex < _this.header.length && h("td", {
          "class": [bem('cell', jitem[_this.dataKey] ? ['content', {
            lighter: hasText(jitem[_this.dataKey], 'lighter'),
            opacity: hasText(jitem[_this.dataKey], 'opacity')
          }] : '')]
        }, [_this.slots('default') || jitem[_this.dataKey]]);
      });
    });
    var main = this.label ? this.label.map(function (item, i) {
      return h("tr", [h("td", {
        "class": bem('label')
      }, [item]), content[i]]);
    }) : this.data.map(function (item, i) {
      return h("tr", [content[i]]);
    });
    return h("div", {
      "class": bem()
    }, [title, h("table", {
      "class": bem('table')
    }, [h("tr", [this.label && h("td"), header]), main])]);
  }
});

exports.default = _default;