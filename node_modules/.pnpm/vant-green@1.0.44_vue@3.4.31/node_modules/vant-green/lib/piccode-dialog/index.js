"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _overlay = _interopRequireDefault(require("../overlay"));

var _passwordInput = _interopRequireDefault(require("../password-input"));

var _numberKeyboard = _interopRequireDefault(require("../number-keyboard"));

var _icon = _interopRequireDefault(require("../icon"));

var _createNamespace = (0, _utils.createNamespace)('piccode-dialog'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: {
    show: Boolean,
    length: {
      type: Number,
      default: 4
    },
    title: String,
    pic: String,
    value: String,
    gutter: {
      type: [Number, String],
      default: '8'
    },
    mask: Boolean,
    errorInfo: String,
    focused: {
      type: Boolean,
      default: true
    },
    closable: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      valueText: ''
    };
  },
  methods: {
    onFocus: function onFocus() {
      this.$emit('focus');
    },
    input: function input(text) {
      this.$emit('input', text);
      this.valueText = (this.value + text).slice(0, 4);

      if (this.valueText.length === this.length) {
        this.check();
      }
    },
    delete: function _delete() {
      this.valueText = this.valueText.slice(0, this.value.length - 1);
      this.$emit('delete');
    },
    check: function check() {
      this.$emit('check', this.valueText);
    },
    refresh: function refresh() {
      this.$emit('refresh');
    },
    close: function close() {
      this.show && this.$emit('close');
    }
  },
  render: function render() {
    var h = arguments[0];
    var closeIcon = h(_icon.default, {
      "attrs": {
        "role": "button",
        "tabindex": "0",
        "name": "cross"
      },
      "class": bem('close-icon'),
      "on": {
        "click": this.close
      }
    });
    var genTitle = this.slots('title') || this.title && h("div", {
      "class": bem('title')
    }, [this.title]);
    var passwordInput = h("div", {
      "class": bem('body')
    }, [this.errorInfo && this.value.length === this.length && h("div", {
      "class": [bem('error-info'), 'van-multi-ellipsis--l2']
    }, [this.errorInfo]), h("div", {
      "class": bem('code'),
      "on": {
        "click": this.refresh
      }
    }, [h("img", {
      "class": bem('pic'),
      "attrs": {
        "src": this.pic
      }
    }), h("div", {
      "class": bem('icon')
    }, [h(_icon.default, {
      "attrs": {
        "name": "replay",
        "color": "#999999 ",
        "size": 26
      }
    })])]), h(_passwordInput.default, {
      "attrs": {
        "value": this.value,
        "length": this.length,
        "focused": this.focused,
        "gutter": this.gutter,
        "mask": this.mask
      },
      "on": {
        "focus": this.onFocus
      }
    })]);
    return h(_overlay.default, {
      "attrs": {
        "show": this.show
      },
      "class": bem()
    }, [h("div", {
      "class": bem('wrapper')
    }, [this.closable && closeIcon, genTitle, this.slots(), passwordInput]), h(_numberKeyboard.default, {
      "attrs": {
        "show": this.show
      },
      "on": {
        "input": this.input,
        "delete": this.delete
      }
    })]);
  }
});

exports.default = _default;