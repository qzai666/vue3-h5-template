"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _divider = _interopRequireDefault(require("../divider"));

var _rate = _interopRequireDefault(require("../rate"));

var _button = _interopRequireDefault(require("../button"));

var _icon = _interopRequireDefault(require("../icon"));

var _tag = _interopRequireDefault(require("../tag"));

var _avatar = _interopRequireDefault(require("../avatar"));

var _row = _interopRequireDefault(require("../row"));

var _createNamespace = (0, _utils.createNamespace)('doctor-card'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: {
    avatarOffsetTop: [Number, String],
    avatarFigure: {
      type: [String, Number],
      default: 1
    },
    avatarSize: {
      type: [Number, String],
      default: 50
    },
    avatarRadius: {
      type: [Number, String],
      default: 4
    },
    showOnline: Boolean,
    online: Boolean,
    name: String,
    nameColor: String,
    title: String,
    hospitalLevel: String,
    hospital: String,
    department: String,
    skill: String,
    skillTag: Array,
    praiseNum: Number,
    responseTime: String,
    receiveNum: Number,
    consultNum: Number,
    score: Number,
    buttonText: String,
    showDefaultText: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    clickCard: function clickCard() {
      event.stopPropagation();
      this.$emit('clickCard');
    },
    clickButton: function clickButton() {
      event.stopPropagation();
      this.$emit('clickButton');
    }
  },
  render: function render() {
    var _this = this;

    var h = arguments[0];
    var slots = this.slots;
    var genAvatar = h("div", {
      "class": bem('avatar'),
      "style": {
        marginTop: (0, _utils.addUnit)(this.avatarOffsetTop),
        height: (0, _utils.addUnit)(this.avatarSize)
      }
    }, [slots('avatar') || h(_avatar.default, {
      "attrs": {
        "figure": this.avatarFigure,
        "size": this.avatarSize,
        "radius": this.avatarRadius
      }
    }), this.showOnline && h("div", {
      "class": bem('online-tag', {
        online: this.online
      })
    }, [h("div", {
      "class": bem('online-text')
    }, [this.online ? '在线' : '离线'])])]);
    var genBase = h(_row.default, {
      "attrs": {
        "type": "flex",
        "align": "center",
        "justify": "space-between"
      }
    }, [h("div", [(0, _utils.isDef)(this.name) && h("span", {
      "class": bem('name'),
      "style": {
        color: this.nameColor
      }
    }, [this.name]), (0, _utils.isDef)(this.title) && h("span", {
      "class": bem('title')
    }, [this.title])]), h("div", [this.slots('corner')])]);
    var genUnit = ((0, _utils.isDef)(this.hospitalLevel) || (0, _utils.isDef)(this.hospital) || (0, _utils.isDef)(this.department)) && h("div", {
      "class": bem('unit')
    }, [(0, _utils.isDef)(this.hospitalLevel) && h(_tag.default, {
      "attrs": {
        "plain": true,
        "size": "small",
        "color": "#6E6E6E"
      },
      "class": bem('level-tag')
    }, [this.hospitalLevel]), (0, _utils.isDef)(this.hospital) && h("span", {
      "class": bem('hospital')
    }, [this.hospital]), (0, _utils.isDef)(this.department) && h("span", {
      "class": bem('department')
    }, [this.department])]);
    var genSkill = (0, _utils.isDef)(this.skillTag) ? h("div", {
      "class": bem('skill', 'tag')
    }, [h(_icon.default, {
      "attrs": {
        "name": "good-job",
        "color": "#B5B8B6"
      }
    }), this.skillTag.map(function (item) {
      return h(_tag.default, {
        "attrs": {
          "plain": false,
          "round": true,
          "text-color": "#666666"
        },
        "class": bem('skill-tag')
      }, [item]);
    })]) : (0, _utils.isDef)(this.skill) ? h("div", {
      "class": [bem('skill'), 'van-multi-ellipsis--l1']
    }, [this.showDefaultText ? '擅长：' : '', this.skill]) : '';
    var genDesc = ((0, _utils.isDef)(this.praiseNum) || (0, _utils.isDef)(this.responseTime)) && h("div", {
      "class": bem('description')
    }, [(0, _utils.isDef)(this.praiseNum) && h("span", [this.showDefaultText ? '好评数&nbsp;' : '', this.praiseNum, this.showDefaultText ? '人' : '']), (0, _utils.isDef)(this.praiseNum) && (0, _utils.isDef)(this.responseTime) && h("i", {
      "class": bem('gap')
    }, ["|"]), (0, _utils.isDef)(this.responseTime) && h("span", [this.showDefaultText ? '响应速度&nbsp;' : '', this.responseTime])]);
    var genFooter = slots('footer') || ((0, _utils.isDef)(this.receiveNum) || (0, _utils.isDef)(this.consultNum) || (0, _utils.isDef)(this.score) || this.buttonText) && h("div", {
      "class": bem('footer')
    }, [h(_divider.default, {
      "attrs": {
        "dashed": true,
        "margin": 8
      }
    }), h(_row.default, {
      "attrs": {
        "type": "flex",
        "align": "center",
        "justify": "space-between"
      }
    }, [(0, _utils.isDef)(this.receiveNum) && h("div", [this.showDefaultText ? '接诊量 ' : '', this.receiveNum]), (0, _utils.isDef)(this.consultNum) && h("div", [this.showDefaultText ? '已有' : '', h("span", {
      "class": bem('consult-num')
    }, [this.consultNum]), this.showDefaultText ? '人咨询' : '']), (0, _utils.isDef)(this.score) && h("div", [h(_rate.default, {
      "attrs": {
        "void-icon": "star",
        "void-color": "#eee",
        "allow-half": true,
        "size": 12,
        "readonly": true
      },
      "model": {
        value: _this.score,
        callback: function callback($$v) {
          _this.score = $$v;
        }
      }
    }), h("span", {
      "class": "margin-left6"
    }, [this.score])]), this.buttonText && h(_button.default, {
      "attrs": {
        "type": "warning",
        "size": "small"
      },
      "on": {
        "click": this.clickButton
      }
    }, [this.buttonText])])]);
    return h("div", {
      "attrs": {
        "role": "doctor-card"
      },
      "class": bem(),
      "on": {
        "click": this.clickCard
      }
    }, [genAvatar, h("div", {
      "class": bem('wrapper')
    }, [genBase, genUnit, genSkill, genDesc, genFooter])]);
  }
});

exports.default = _default;